{"version":3,"sources":["contexts/TodoContext.js","components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["TodoContext","createContext","TodoContextProvider","props","useEffect","storedTodo","JSON","parse","localStorage","getItem","setTodos","useState","editTodo","setEditTodo","todos","Provider","value","addTodo","text","id","newTodo","complete","uuid","setItem","stringify","doneTodo","todo","find","removeTodo","filter","updateTodo","alterTodo","altTodo","children","TodoInput","todoText","setTodoText","useContext","className","htmlFor","type","placeholder","onChange","e","target","onClick","TodoItem","style","width","to","TodoList","length","map","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e11104f.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport uuid from 'uuid/v1';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nconst TodoContextProvider = (props) => {\r\n    // Get the todos from localstorage if any\r\n    useEffect(()=>{\r\n        const storedTodo = JSON.parse(localStorage.getItem('todos'))\r\n        if(storedTodo) setTodos(storedTodo)\r\n    },[])\r\n\r\n    const [editTodo, setEditTodo] = useState(null) \r\n    const [todos, setTodos]  = useState([\r\n    ]);\r\n    // Handle add new todo item\r\n    const addTodo = (text, id) => {\r\n        const newTodo = [...todos, {text, complete: false, id: uuid() }]\r\n        setTodos(newTodo)\r\n        localStorage.setItem('todos',JSON.stringify(newTodo))\r\n    }\r\n    // Keep track of edit item\r\n    const updateTodo = todo => {\r\n        setEditTodo(todo)\r\n    }\r\n    // Change the todo complete status\r\n    const doneTodo = id => {\r\n        const doneTodo = [...todos]\r\n        const todo = doneTodo.find(todo => todo.id === id)\r\n        todo.complete = !todo.complete\r\n        setTodos(doneTodo)\r\n        localStorage.setItem('todos',JSON.stringify(doneTodo))\r\n    }\r\n    // Remove the todo item\r\n    const removeTodo = id => {\r\n        const removeTodo = todos.filter(todo => todo.id !== id)\r\n        setTodos(removeTodo);\r\n        localStorage.setItem('todos',JSON.stringify(removeTodo))\r\n    }\r\n    // Alter todo item\r\n    const alterTodo = (text, id) => {\r\n        const altTodo = [...todos]\r\n        const todo = altTodo.find(todo => todo.id === id)\r\n        todo.text = text\r\n        setTodos(altTodo)\r\n        setEditTodo(null)\r\n        localStorage.setItem('todos',JSON.stringify(altTodo))\r\n    }\r\n    return (\r\n        <TodoContext.Provider value={{\r\n            todos,\r\n            addTodo,\r\n            doneTodo,\r\n            removeTodo,\r\n            updateTodo,\r\n            alterTodo,\r\n            editTodo\r\n        }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TodoContextProvider;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { TodoContext } from \"../contexts/TodoContext\";\r\n\r\nconst TodoInput = () => {\r\n  const [todoText, setTodoText] = useState(\"\");\r\n  const { addTodo, editTodo, alterTodo } = useContext(TodoContext);\r\n  // check if edit or add todo then process the collect procedure\r\n  const handleAdd = () => {\r\n    if (editTodo !== null) {\r\n      alterTodo(todoText, editTodo.id);\r\n      setTodoText(\"\");\r\n    } else {\r\n      if (todoText !== \"\") {\r\n        addTodo(todoText);\r\n        setTodoText(\"\");\r\n      }\r\n    }\r\n  };\r\n  // UseEffect hooks to check if the todo item has been selected to edit or not\r\n  useEffect(() => {\r\n    if (editTodo !== null) {\r\n      setTodoText(editTodo.text);\r\n    }\r\n  }, [editTodo]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"input-group col-md-6 row\">\r\n        <label htmlFor=\"todoInput\" className=\"col-md-2\">\r\n          Todo:{\" \"}\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"todoInput\"\r\n          className=\"col-md-10\"\r\n          placeholder=\"Enter what you want to do here...\"\r\n          value={todoText}\r\n          onChange={e => setTodoText(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"input-group col-md-6\">\r\n        <button onClick={handleAdd}>\r\n          {editTodo !== null ? \"EDIT\" : \"ADD\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TodoContext } from \"../contexts/TodoContext\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoItem = ({ todo }) => {\r\n  // Access state and function from Context API\r\n  const { removeTodo, updateTodo, doneTodo } = useContext(TodoContext);\r\n  return (\r\n    <tr>\r\n      <td style={{ width: \"50%\" }}>\r\n        <span className={todo.complete ? \"todo-marked\" : \"\"}>{todo.text}</span>\r\n      </td>\r\n      <td style={{ width: \"50%\" }}>\r\n        {!todo.complete && (\r\n          <Link className=\"btn\" to=\"\" onClick={() => doneTodo(todo.id)}>\r\n            Done\r\n          </Link>\r\n        )}\r\n        {!todo.complete && <span>|</span>}\r\n        {!todo.complete && (\r\n          <Link to=\"\" className=\"btn\" onClick={() => updateTodo(todo)}>\r\n            Edit\r\n          </Link>\r\n        )}\r\n        {!todo.complete && <span>|</span>}\r\n        <Link to=\"\" className=\"btn\" onClick={() => removeTodo(todo.id)}>\r\n          Remove\r\n        </Link>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n// Props type checking\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { useContext } from \"react\";\r\nimport { TodoContext } from \"../contexts/TodoContext\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoList = () => {\r\n  // Access state and function from Context API\r\n  const { todos, addTodo, removeTodo, updateTodo, doneTodo } = useContext(\r\n    TodoContext\r\n  );\r\n  // Check if are there any todos if not it will show \"No Todo... otherwise it will be the rows of todos\"\r\n  return todos.length ? (\r\n    <table className=\"table table-bordered my-2\">\r\n      <tbody>\r\n        {todos.map(todo => (\r\n          <TodoItem key={todo.id} todo={todo} />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  ) : (\r\n    <div className=\"my-2\">No Todo...</div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport TodoContextProvider from './contexts/TodoContext';\n\nconst App = () => {\n  return (\n    <div className=\"App container p-4\">\n      <Router>\n        <TodoContextProvider>\n          <TodoInput />\n          <TodoList />\n        </TodoContextProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}